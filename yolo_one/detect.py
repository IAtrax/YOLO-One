import argparse
import time
import torch
import cv2
import numpy as np
from pathlib import Path
from typing import List, Dict, Any

# Local imports
from yolo_one.inference import YoloOneInference
from yolo_one.utils.visualize import draw_bounding_boxes, log_detections
import rerun as rr

def detect(args: argparse.Namespace):
    """Main detection function."""
    # Initialize Rerun
    rr.init("yolo_one_detection", spawn=True)

    # 1. Initialize the inference engine
    print("Initializing YOLO-One inference engine...")
    if not args.weights or not Path(args.weights).exists():
        raise FileNotFoundError(f"Weights file not found or not specified: {args.weights}")
        
    inference_engine = YoloOneInference(
        model_path=args.weights,
        device=args.device,
        confidence_threshold=args.conf,
        nms_threshold=args.iou,
        input_size=args.input_size
    )
    print("Inference engine ready.")

    # 2. Load image and run prediction
    print(f"Processing image: {args.source}")
    original_image = cv2.imread(str(args.source))
    if original_image is None:
        raise FileNotFoundError(f"Could not read image at: {args.source}")

    results = inference_engine.predict_image(
        image=original_image, # Pass the numpy array
        visualize=True # Request the visualization from the engine
    )
    print(f"Found {results['num_detections']} objects in {results['total_time']*1000:.2f}ms.")

    # 3. Use the results
    detections = results['detections']

    # Log to Rerun
    log_detections(
        cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB),
        detections['boxes'],
        [f"object" for _ in range(detections['num_detections'])],
        detections['scores']
    )

    # Save the visualization generated by the engine
    output_image = results['visualization']
    output_path = Path(args.output_dir) / args.source.name
    output_path.parent.mkdir(parents=True, exist_ok=True)
    cv2.imwrite(str(output_path), output_image)
    print(f"Output image saved to: {output_path}")
    time.sleep(5)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="YOLO-One Detection Script")
    parser.add_argument('--weights', type=str, default=None, help='Path to model weights file.')
    parser.add_argument('--source', type=Path, required=True, help='Path to input image.')
    parser.add_argument('--model-size', type=str, default='nano', choices=['nano', 'small', 'medium', 'large'], help='Model size.')
    parser.add_argument('--input-size', type=int, default=640, help='Model input size.')
    parser.add_argument('--conf', type=float, default=0.25, help='Confidence threshold.')
    parser.add_argument('--iou', type=float, default=0.45, help='IoU threshold for NMS.')
    parser.add_argument('--device', type=str, default=None, help='Device to use (e.g., cpu, cuda, cuda:0).')
    parser.add_argument('--output-dir', type=str, default='./runs/detect', help='Directory to save output images.')

    args = parser.parse_args()

    detect(args)